---
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import { characters } from '@/lib/static-content';
import { Star, Zap, Heart, Brain, Shield, TrendingUp, Trophy, Award } from 'lucide-react';

export function getStaticPaths() {
  return characters.map((character) => ({
    params: { id: character.id },
    props: { character },
  }));
}

const { character } = Astro.props;

// Helper function to get aptitude color
function getAptitudeColor(value: string) {
  switch(value) {
    case 'S': return 'text-red-500 font-bold';
    case 'A': return 'text-orange-500 font-bold';
    case 'B': return 'text-yellow-500';
    case 'C': return 'text-green-500';
    case 'D': return 'text-blue-500';
    case 'E': return 'text-gray-500';
    case 'F': return 'text-gray-400';
    case 'G': return 'text-gray-300';
    default: return 'text-gray-500';
  }
}

function getBestStat(attributes: any) {
  if (!attributes) return 'Speed';
  const stats = ['speed', 'stamina', 'power', 'guts', 'wisdom'];
  let best = 'speed';
  let max = 0;
  for (const stat of stats) {
    if (attributes[stat] > max) {
      max = attributes[stat];
      best = stat;
    }
  }
  return best.charAt(0).toUpperCase() + best.slice(1);
}

function getBestDistance(aptitudes: any) {
  if (!aptitudes) return 'Mile';
  const distances = ['sprint', 'mile', 'medium', 'long'];
  const values: Record<string, number> = { 'S': 7, 'A': 6, 'B': 5, 'C': 4, 'D': 3, 'E': 2, 'F': 1, 'G': 0 };
  let best = 'mile';
  let maxScore = 0;
  for (const dist of distances) {
    const score = values[aptitudes[dist]] || 0;
    if (score > maxScore) {
      maxScore = score;
      best = dist;
    }
  }
  return best.charAt(0).toUpperCase() + best.slice(1);
}

function getBestStrategy(aptitudes: any) {
  if (!aptitudes) return 'Better';
  const strategies = ['leader', 'better', 'chaser'];
  const values: Record<string, number> = { 'S': 7, 'A': 6, 'B': 5, 'C': 4, 'D': 3, 'E': 2, 'F': 1, 'G': 0 };
  let best = 'better';
  let maxScore = 0;
  for (const strat of strategies) {
    const score = values[aptitudes[strat]] || 0;
    if (score > maxScore) {
      maxScore = score;
      best = strat;
    }
  }
  return best.charAt(0).toUpperCase() + best.slice(1);
}
---

<Layout title={`${character.name_en} - UmamusumeDB`}>
  <Header />
  
  <main class="container mx-auto px-4 py-8">
    <!-- Breadcrumb -->
    <nav class="text-sm mb-6">
      <ol class="flex items-center space-x-2">
        <li><a href="/" class="text-uma-primary hover:underline">Home</a></li>
        <li class="text-gray-400">/</li>
        <li><a href="/characters/" class="text-uma-primary hover:underline">Characters</a></li>
        <li class="text-gray-400">/</li>
        <li class="text-gray-600">{character.name_en}</li>
      </ol>
    </nav>

    <div class="grid lg:grid-cols-3 gap-8">
      <!-- Left Column - Character Image and Basic Info -->
      <div class="lg:col-span-1">
        <div class="glass rounded-xl p-6 sticky top-20">
          <!-- Character Image -->
          <div class="relative aspect-[3/4] bg-gradient-to-br from-uma-primary/20 to-uma-secondary/20 rounded-lg mb-4 overflow-hidden">
            {character.image_url ? (
              <img 
                src={character.image_url} 
                alt={character.name_en}
                class="absolute inset-0 w-full h-full object-cover object-top"
                loading="lazy"
              />
            ) : (
              <div class="absolute inset-0 flex items-center justify-center">
                <div class="text-center">
                  <div class="w-32 h-32 mx-auto mb-4 bg-gradient-to-br from-uma-primary to-uma-secondary rounded-full flex items-center justify-center">
                    <Trophy className="w-16 h-16 text-white" />
                  </div>
                  <p class="text-gray-500">Character Image</p>
                </div>
              </div>
            )}
          </div>

          <!-- Basic Info -->
          <div class="space-y-3">
            <h1 class="text-2xl font-display gradient-text">{character.name_en}</h1>
            <p class="text-lg font-jp text-gray-600">{character.name_jp}</p>
            
            <!-- Rarity -->
            <div class="flex items-center gap-2">
              <span class="text-sm text-gray-600">Rarity:</span>
              <div class="flex">
                {Array.from({ length: character.rarity }, () => (
                  <Star className="w-5 h-5 fill-uma-accent text-uma-accent" />
                ))}
              </div>
            </div>

            <!-- Birthday -->
            <div class="flex items-center gap-2">
              <span class="text-sm text-gray-600">Birthday:</span>
              <span class="font-medium">{character.birthday || 'Unknown'}</span>
            </div>

            <!-- CV -->
            <div class="flex items-center gap-2">
              <span class="text-sm text-gray-600">Voice Actor:</span>
              <span class="font-medium">{character.cv || 'Unknown'}</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Column - Detailed Stats -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Stats Section -->
        <div class="glass rounded-xl p-6">
          <h2 class="text-xl font-display mb-4 flex items-center gap-2">
            <TrendingUp className="w-5 h-5 text-uma-primary" />
            Character Statistics
          </h2>
          
          <div class="grid md:grid-cols-2 gap-4">
            <div class="space-y-3">
              <div class="flex items-center gap-3">
                <span class="text-2xl">‚ö°</span>
                <div class="flex-1">
                  <div class="flex justify-between mb-1">
                    <span class="text-sm font-medium">Speed</span>
                    <div class="text-sm">
                      <span class="font-bold">{character.initial_stats?.speed || 0}</span>
                      <span class="text-gray-500"> / {character.max_stats?.speed || 1200}</span>
                      {character.growth_rates?.speed && (
                        <span class="text-uma-accent ml-1">({character.growth_rates.speed})</span>
                      )}
                    </div>
                  </div>
                  <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div class="bg-red-500 h-full transition-all duration-500" style={{width: `${((character.initial_stats?.speed || 0) / (character.max_stats?.speed || 1200)) * 100}%`}}></div>
                  </div>
                </div>
              </div>
              <div class="flex items-center gap-3">
                <span class="text-2xl">‚ù§Ô∏è</span>
                <div class="flex-1">
                  <div class="flex justify-between mb-1">
                    <span class="text-sm font-medium">Stamina</span>
                    <div class="text-sm">
                      <span class="font-bold">{character.initial_stats?.stamina || 0}</span>
                      <span class="text-gray-500"> / {character.max_stats?.stamina || 1200}</span>
                      {character.growth_rates?.stamina && (
                        <span class="text-uma-accent ml-1">({character.growth_rates.stamina})</span>
                      )}
                    </div>
                  </div>
                  <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div class="bg-green-500 h-full transition-all duration-500" style={{width: `${((character.initial_stats?.stamina || 0) / (character.max_stats?.stamina || 1200)) * 100}%`}}></div>
                  </div>
                </div>
              </div>
              <div class="flex items-center gap-3">
                <span class="text-2xl">üí™</span>
                <div class="flex-1">
                  <div class="flex justify-between mb-1">
                    <span class="text-sm font-medium">Power</span>
                    <div class="text-sm">
                      <span class="font-bold">{character.initial_stats?.power || 0}</span>
                      <span class="text-gray-500"> / {character.max_stats?.power || 1200}</span>
                      {character.growth_rates?.power && (
                        <span class="text-uma-accent ml-1">({character.growth_rates.power})</span>
                      )}
                    </div>
                  </div>
                  <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div class="bg-orange-500 h-full transition-all duration-500" style={{width: `${((character.initial_stats?.power || 0) / (character.max_stats?.power || 1200)) * 100}%`}}></div>
                  </div>
                </div>
              </div>
            </div>
            <div class="space-y-3">
              <div class="flex items-center gap-3">
                <span class="text-2xl">üî•</span>
                <div class="flex-1">
                  <div class="flex justify-between mb-1">
                    <span class="text-sm font-medium">Guts</span>
                    <div class="text-sm">
                      <span class="font-bold">{character.initial_stats?.guts || 0}</span>
                      <span class="text-gray-500"> / {character.max_stats?.guts || 1200}</span>
                      {character.growth_rates?.guts && (
                        <span class="text-uma-accent ml-1">({character.growth_rates.guts})</span>
                      )}
                    </div>
                  </div>
                  <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div class="bg-purple-500 h-full transition-all duration-500" style={{width: `${((character.initial_stats?.guts || 0) / (character.max_stats?.guts || 1200)) * 100}%`}}></div>
                  </div>
                </div>
              </div>
              <div class="flex items-center gap-3">
                <span class="text-2xl">üß†</span>
                <div class="flex-1">
                  <div class="flex justify-between mb-1">
                    <span class="text-sm font-medium">Wisdom</span>
                    <div class="text-sm">
                      <span class="font-bold">{character.initial_stats?.wisdom || 0}</span>
                      <span class="text-gray-500"> / {character.max_stats?.wisdom || 1200}</span>
                      {character.growth_rates?.wisdom && (
                        <span class="text-uma-accent ml-1">({character.growth_rates.wisdom})</span>
                      )}
                    </div>
                  </div>
                  <div class="h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div class="bg-blue-500 h-full transition-all duration-500" style={{width: `${((character.initial_stats?.wisdom || 0) / (character.max_stats?.wisdom || 1200)) * 100}%`}}></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Aptitudes Section -->
        <div class="glass rounded-xl p-6">
          <h2 class="text-xl font-display mb-4 flex items-center gap-2">
            <Award className="w-5 h-5 text-uma-primary" />
            Racing Aptitudes
          </h2>
          
          <div class="grid md:grid-cols-2 gap-6">
            <!-- Distance Aptitudes -->
            <div>
              <h3 class="font-semibold mb-3 text-gray-700">Distance</h3>
              <div class="space-y-2">
                <div class="flex justify-between items-center">
                  <span class="text-sm">Sprint</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.sprint || 'G')} text-lg`}>{character.aptitudes?.sprint || 'G'}</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm">Mile</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.mile || 'G')} text-lg`}>{character.aptitudes?.mile || 'G'}</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm">Medium</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.medium || 'G')} text-lg`}>{character.aptitudes?.medium || 'G'}</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm">Long</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.long || 'G')} text-lg`}>{character.aptitudes?.long || 'G'}</span>
                </div>
              </div>
            </div>

            <!-- Track Aptitudes -->
            <div>
              <h3 class="font-semibold mb-3 text-gray-700">Track & Strategy</h3>
              <div class="space-y-2">
                <div class="flex justify-between items-center">
                  <span class="text-sm">Turf</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.turf || 'G')} text-lg`}>{character.aptitudes?.turf || 'G'}</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm">Dirt</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.dirt || 'G')} text-lg`}>{character.aptitudes?.dirt || 'G'}</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm">Leader</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.leader || 'G')} text-lg`}>{character.aptitudes?.leader || 'G'}</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm">Better</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.better || 'G')} text-lg`}>{character.aptitudes?.better || 'G'}</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm">Chaser</span>
                  <span class={`${getAptitudeColor(character.aptitudes?.chaser || 'G')} text-lg`}>{character.aptitudes?.chaser || 'G'}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Unique Skill Section -->
        {character.unique_skill && (
          <div class="glass rounded-xl p-6">
            <h2 class="text-xl font-display mb-4 flex items-center gap-2">
              <Zap className="w-5 h-5 text-uma-primary" />
              Unique Skill
            </h2>
            
            <div class="flex items-start gap-3 p-3 bg-white rounded-lg">
              <div class="w-10 h-10 bg-gradient-to-br from-uma-accent/20 to-uma-accent/10 rounded-full flex items-center justify-center flex-shrink-0">
                <Zap className="w-5 h-5 text-uma-accent" />
              </div>
              <div>
                <h3 class="font-semibold">{character.unique_skill.name_en || 'Unique Skill'}</h3>
                <p class="text-sm font-jp text-gray-500">{character.unique_skill.name_jp || ''}</p>
                <p class="text-sm text-gray-600 mt-1">{character.unique_skill.effect || 'Special skill effect'}</p>
              </div>
            </div>
          </div>
        )}
        
        <!-- Awakening Skills Section -->
        {character.awakening_skills && character.awakening_skills.length > 0 && (
          <div class="glass rounded-xl p-6">
            <h2 class="text-xl font-display mb-4 flex items-center gap-2">
              <Star className="w-5 h-5 text-uma-primary" />
              Awakening Skills
            </h2>
            
            <div class="grid gap-3">
              {character.awakening_skills.map((skill: any) => (
                <div class="flex items-start gap-3 p-3 bg-white rounded-lg">
                  <div class="w-10 h-10 bg-gradient-to-br from-uma-secondary/20 to-uma-secondary/10 rounded-full flex items-center justify-center flex-shrink-0">
                    <Star className="w-5 h-5 text-uma-secondary" />
                  </div>
                  <div>
                    <h3 class="font-semibold">{skill.name_en || skill}</h3>
                    {skill.name_jp && <p class="text-sm font-jp text-gray-500">{skill.name_jp}</p>}
                    {skill.effect && <p class="text-sm text-gray-600 mt-1">{skill.effect}</p>}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Training Tips -->
        <div class="glass rounded-xl p-6">
          <h2 class="text-xl font-display mb-4 flex items-center gap-2">
            <Shield className="w-5 h-5 text-uma-primary" />
            Training Tips
          </h2>
          
          <div class="prose prose-sm max-w-none text-gray-600">
            <p>Based on {character.name_en}'s aptitudes, here are recommended training strategies:</p>
            <ul>
              <li>Focus on <strong>{getBestStat(character.attributes)}</strong> training for optimal performance</li>
              <li>Best distance: <strong>{getBestDistance(character.aptitudes)}</strong></li>
              <li>Recommended strategy: <strong>{getBestStrategy(character.aptitudes)}</strong></li>
              <li>Pair with support cards that enhance their strengths</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </main>

  <style>
    .prose ul {
      @apply list-disc list-inside space-y-1;
    }
  </style>
</Layout>
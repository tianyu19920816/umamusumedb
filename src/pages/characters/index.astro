---
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import Breadcrumb from '@/components/Breadcrumb.astro';
import CharacterCard from '@/components/CharacterCard';
import { characters } from '@/lib/static-content';
import { Search } from 'lucide-react';

// Group characters by rarity
const charactersByRarity = characters.reduce((acc, char) => {
  const rarity = char.rarity || 1;
  if (!acc[rarity]) acc[rarity] = [];
  acc[rarity].push(char);
  return acc;
}, {} as Record<number, typeof characters>);
---

<Layout title="Characters">
  <Header />

  <main class="container mx-auto px-3 sm:px-4 py-4 sm:py-8">
    <Breadcrumb items={[{ label: 'Characters' }]} />

    <!-- Page Header -->
    <div class="mb-6 sm:mb-8">
      <h1 class="text-3xl sm:text-4xl font-display gradient-text mb-3 sm:mb-4">Characters</h1>
      <p class="text-sm sm:text-base text-gray-600">Browse all Uma Musume characters and their stats</p>
    </div>

    <!-- Filters and Search -->
    <div class="glass rounded-xl p-4 mb-8">
      <div class="flex flex-col md:flex-row gap-4">
        <!-- Search Bar -->
        <div class="flex-1 relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            id="character-search"
            placeholder="Search characters..."
            class="w-full pl-10 pr-4 py-2 rounded-lg border border-uma-primary/20 bg-white/50 focus:outline-none focus:border-uma-primary"
          />
        </div>

        <!-- Rarity Filter -->
        <select id="rarity-filter" class="px-4 py-2 rounded-lg border border-uma-primary/20 bg-white/50">
          <option value="all">All Rarities</option>
          <option value="3">3★ Only</option>
          <option value="2">2★ Only</option>
          <option value="1">1★ Only</option>
        </select>

        <!-- Distance Filter -->
        <select id="distance-filter" class="px-4 py-2 rounded-lg border border-uma-primary/20 bg-white/50">
          <option value="all">All Distances</option>
          <option value="sprint">Sprint</option>
          <option value="mile">Mile</option>
          <option value="medium">Medium</option>
          <option value="long">Long</option>
        </select>

        <!-- Running Style Filter -->
        <select id="running-style-filter" class="px-4 py-2 rounded-lg border border-uma-primary/20 bg-white/50">
          <option value="all">All Styles</option>
          <option value="escape">Escape</option>
          <option value="lead">Lead</option>
          <option value="between">Between</option>
          <option value="chase">Chase</option>
        </select>

        <!-- Surface Filter -->
        <select id="surface-filter" class="px-4 py-2 rounded-lg border border-uma-primary/20 bg-white/50">
          <option value="all">All Surfaces</option>
          <option value="turf">Turf</option>
          <option value="dirt">Dirt</option>
        </select>

      </div>
    </div>

    <!-- Characters Display -->
    <div id="characters-container">
      {Object.entries(charactersByRarity)
        .sort(([a], [b]) => Number(b) - Number(a))
        .map(([rarity, chars]) => (
          <div class="mb-12" data-rarity={rarity}>
            <div class="flex items-center gap-3 mb-6">
              <h2 class="text-2xl font-display">
                {rarity === '3' ? 'Three Star' : rarity === '2' ? 'Two Star' : 'One Star'}
              </h2>
              <div class="flex gap-1">
                {Array.from({ length: Number(rarity) }, (_, i) => (
                  <span class="text-uma-accent">★</span>
                ))}
              </div>
              <span class="text-gray-500">({chars.length} characters)</span>
            </div>
            
            <div id="grid-container" class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {chars.map((character) => (
                <div class="character-item" 
                     data-name={character.name_en.toLowerCase()} 
                     data-rarity={character.rarity}
                     data-aptitudes={JSON.stringify(character.aptitudes)}>
                  <CharacterCard character={character} client:load />
                </div>
              ))}
            </div>
          </div>
        ))}
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-12">
      <p class="text-xl text-gray-500">No characters found matching your filters</p>
    </div>
  </main>


  <script>
    // Search and filter functionality
    const searchInput = document.getElementById('character-search') as HTMLInputElement;
    const rarityFilter = document.getElementById('rarity-filter') as HTMLSelectElement;
    const distanceFilter = document.getElementById('distance-filter') as HTMLSelectElement;
    const runningStyleFilter = document.getElementById('running-style-filter') as HTMLSelectElement;
    const surfaceFilter = document.getElementById('surface-filter') as HTMLSelectElement;
    const container = document.getElementById('characters-container');
    const noResults = document.getElementById('no-results');

    function filterCharacters() {
      const searchTerm = searchInput?.value.toLowerCase() || '';
      const selectedRarity = rarityFilter?.value || 'all';
      const selectedDistance = distanceFilter?.value || 'all';
      const selectedRunningStyle = runningStyleFilter?.value || 'all';
      const selectedSurface = surfaceFilter?.value || 'all';

      let hasResults = false;

      // Filter individual characters
      document.querySelectorAll('.character-item').forEach((item) => {
        const name = item.getAttribute('data-name') || '';
        const rarity = item.getAttribute('data-rarity') || '';
        const aptitudes = JSON.parse(item.getAttribute('data-aptitudes') || '{}');

        const matchesSearch = name.includes(searchTerm);
        const matchesRarity = selectedRarity === 'all' || rarity === selectedRarity;
        const matchesDistance = selectedDistance === 'all' ||
          (aptitudes[selectedDistance] && ['S', 'A', 'B'].includes(aptitudes[selectedDistance]));
        const matchesRunningStyle = selectedRunningStyle === 'all' ||
          (aptitudes[selectedRunningStyle] && ['S', 'A', 'B'].includes(aptitudes[selectedRunningStyle]));
        const matchesSurface = selectedSurface === 'all' ||
          (aptitudes[selectedSurface] && ['S', 'A', 'B'].includes(aptitudes[selectedSurface]));

        if (matchesSearch && matchesRarity && matchesDistance && matchesRunningStyle && matchesSurface) {
          (item as HTMLElement).style.display = '';
          hasResults = true;
        } else {
          (item as HTMLElement).style.display = 'none';
        }
      });

      // Hide empty rarity sections
      document.querySelectorAll('[data-rarity]').forEach((section) => {
        const visibleItems = section.querySelectorAll('.character-item:not([style*="display: none"])');
        (section as HTMLElement).style.display = visibleItems.length > 0 ? '' : 'none';
      });

      // Show/hide no results message
      if (noResults) {
        noResults.classList.toggle('hidden', hasResults);
      }
      if (container) {
        container.classList.toggle('hidden', !hasResults);
      }
    }

    // Event listeners
    searchInput?.addEventListener('input', filterCharacters);
    rarityFilter?.addEventListener('change', filterCharacters);
    distanceFilter?.addEventListener('change', filterCharacters);
    runningStyleFilter?.addEventListener('change', filterCharacters);
    surfaceFilter?.addEventListener('change', filterCharacters);
  </script>
</Layout>
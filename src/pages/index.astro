---
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import CharacterCard from '@/components/CharacterCard';
import SupportCardCard from '@/components/SupportCardCard';
import { characters, supportCards, getTierListByCategory } from '@/lib/static-content';
import { Search, Filter, Trophy, Users, Sparkles, ChevronRight, Star, Calculator, TrendingUp } from 'lucide-react';

// Load all data
const tierList = getTierListByCategory('overall');

// Get top tier items
const topCharacters = characters.slice(0, 8);
const topSupportCards = supportCards.filter(card => card.rarity === 'SSR').slice(0, 8);
const topTierCharacters = tierList
  .filter(item => item.item_type === 'character' && ['SS', 'S'].includes(item.tier))
  .slice(0, 6);

// Prepare search data for client
const searchableCharacters = characters.map(c => ({
  id: c.id,
  name_en: c.name_en,
  name_ja: c.name_ja,
  type: 'character',
  rarity: c.rarity
}));

const searchableCards = supportCards.map(c => ({
  id: c.id,
  name_en: c.name_en,
  name_ja: c.name_ja,
  type: 'card',
  rarity: c.rarity,
  cardType: c.type
}));
---

<Layout 
  title="UmamusumeDB - #1 Database for Uma Musume Pretty Derby"
  description="UmamusumeDB is the most comprehensive database for Uma Musume Pretty Derby. Find characters, support cards, tier lists, and team building guides.">
  <Header />
  
  <main class="container mx-auto px-3 sm:px-4 py-4 sm:py-6">
    <!-- Hero Search Section -->
    <div class="glass rounded-xl sm:rounded-2xl p-4 sm:p-6 md:p-8 mb-6 sm:mb-8 bg-gradient-to-br from-uma-primary/10 to-uma-secondary/10">
      <div class="text-center mb-4 sm:mb-6">
        <h1 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-display gradient-text mb-2 sm:mb-3 leading-tight">UmamusumeDB - Uma Musume Database</h1>
        <p class="text-sm sm:text-base md:text-lg text-gray-600 px-2">Welcome to UmamusumeDB, your ultimate resource for Uma Musume Pretty Derby game data, tier lists, and strategies</p>
      </div>

      <!-- Main Search Bar -->
      <div class="max-w-3xl mx-auto">
        <div class="relative">
          <Search className="absolute left-3 sm:left-4 top-1/2 -translate-y-1/2 w-5 h-5 sm:w-6 sm:h-6 text-gray-400" />
          <input
            type="text"
            id="global-search"
            placeholder="Search UmamusumeDB for characters, cards, skills..."
            class="w-full pl-10 sm:pl-12 pr-3 sm:pr-4 py-3 sm:py-4 text-base sm:text-lg rounded-lg sm:rounded-xl border-2 border-uma-primary/20 bg-white/90 focus:outline-none focus:border-uma-primary shadow-lg"
          />
        </div>

        <!-- Quick Filters -->
        <div class="flex flex-wrap gap-2 mt-3 sm:mt-4 justify-center">
          <button class="filter-btn active" data-filter="all">All</button>
          <button class="filter-btn" data-filter="characters">Characters</button>
          <button class="filter-btn" data-filter="cards">Cards</button>
          <button class="filter-btn" data-filter="ssr">SSR</button>
          <button class="filter-btn hidden sm:inline-flex" data-filter="tier-s">S+ Tier</button>
        </div>
      </div>

      <!-- Stats -->
      <div class="grid grid-cols-3 md:grid-cols-6 gap-3 sm:gap-4 mt-6 sm:mt-8">
        <div class="text-center">
          <div class="text-xl sm:text-2xl font-bold gradient-text">{characters.length}</div>
          <div class="text-xs sm:text-sm text-gray-600">Characters</div>
        </div>
        <div class="text-center">
          <div class="text-xl sm:text-2xl font-bold gradient-text">{supportCards.length}</div>
          <div class="text-xs sm:text-sm text-gray-600">Cards</div>
        </div>
        <div class="text-center">
          <div class="text-xl sm:text-2xl font-bold gradient-text">{supportCards.filter(c => c.rarity === 'SSR').length}</div>
          <div class="text-xs sm:text-sm text-gray-600">SSR</div>
        </div>
        <div class="text-center">
          <div class="text-xl sm:text-2xl font-bold gradient-text">30</div>
          <div class="text-xs sm:text-sm text-gray-600">Skills</div>
        </div>
        <div class="text-center">
          <div class="text-xl sm:text-2xl font-bold gradient-text">6</div>
          <div class="text-xs sm:text-sm text-gray-600">Categories</div>
        </div>
        <div class="text-center">
          <div class="text-xl sm:text-2xl font-bold gradient-text">100+</div>
          <div class="text-xs sm:text-sm text-gray-600">Updates</div>
        </div>
      </div>
    </div>

    <!-- Quick Tools Section -->
    <div class="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg sm:rounded-xl p-4 sm:p-6 mb-6 sm:mb-8">
      <h2 class="text-lg sm:text-xl font-bold mb-3 sm:mb-4 flex items-center gap-2">
        <Calculator className="w-5 h-5 text-purple-600" />
        Training Tools
      </h2>
      <div class="grid sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4">
        <a href="/tools/factor-calculator/" class="bg-white rounded-lg p-4 hover:shadow-lg transition-shadow border-2 border-yellow-200 hover:border-yellow-400">
          <div class="flex items-center gap-3 mb-2">
            <div class="w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center">
              <Star className="w-5 h-5 text-yellow-600" />
            </div>
            <div>
              <h3 class="font-semibold">Factor Calculator</h3>
              <p class="text-xs text-gray-600">Calculate inheritance rates</p>
            </div>
          </div>
          <div class="text-sm text-gray-700">
            Optimize your breeding strategy with precise factor inheritance probability calculations.
          </div>
        </a>
        
        <a href="/tools/training-calculator/" class="bg-white rounded-lg p-4 hover:shadow-lg transition-shadow border-2 border-purple-200 hover:border-purple-400">
          <div class="flex items-center gap-3 mb-2">
            <div class="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
              <TrendingUp className="w-5 h-5 text-purple-600" />
            </div>
            <div>
              <h3 class="font-semibold">Training Calculator</h3>
              <p class="text-xs text-gray-600">Optimize stat gains</p>
            </div>
          </div>
          <div class="text-sm text-gray-700">
            Calculate optimal training paths and maximize your stat gains with support cards.
          </div>
        </a>
        
        <a href="/tools/support-deck/" class="bg-white rounded-lg p-4 hover:shadow-lg transition-shadow border-2 border-red-200 hover:border-red-400">
          <div class="flex items-center gap-3 mb-2">
            <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
              <Sparkles className="w-5 h-5 text-red-600" />
            </div>
            <div>
              <h3 class="font-semibold">Deck Builder</h3>
              <p class="text-xs text-gray-600">Build optimal decks</p>
            </div>
          </div>
          <div class="text-sm text-gray-700">
            Create the perfect 6-card support deck with synergy analysis and templates.
          </div>
        </a>
      </div>
      <div class="mt-4 text-center">
        <a href="/tools/" class="text-sm text-purple-600 hover:text-purple-700 font-medium">
          View All Tools â†’
        </a>
      </div>
    </div>

    <!-- Main Content Tabs -->
    <div class="flex gap-2 mb-4 sm:mb-6 overflow-x-auto pb-2 -mx-3 px-3 sm:mx-0 sm:px-0">
      <button class="tab-btn active" data-tab="characters">
        <Users className="w-4 h-4 mr-1 sm:mr-2" />
        <span class="text-sm sm:text-base">Characters</span>
      </button>
      <button class="tab-btn" data-tab="support-cards">
        <Sparkles className="w-4 h-4 mr-1 sm:mr-2" />
        <span class="text-sm sm:text-base">Cards</span>
      </button>
      <button class="tab-btn" data-tab="tier-list">
        <Trophy className="w-4 h-4 mr-1 sm:mr-2" />
        <span class="text-sm sm:text-base">Tier List</span>
      </button>
    </div>

    <!-- Characters Tab -->
    <div class="tab-content active" id="characters">
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-4 mb-4">
        <h2 class="text-xl sm:text-2xl font-display">UmamusumeDB Characters</h2>
        <div class="flex gap-2 w-full sm:w-auto">
          <select id="char-sort" class="flex-1 sm:flex-none px-3 py-1.5 sm:py-1 rounded-lg border border-uma-primary/20 bg-white/50 text-sm">
            <option value="name">Name</option>
            <option value="rarity">Rarity</option>
            <option value="speed">Speed</option>
            <option value="stamina">Stamina</option>
          </select>
        </div>
      </div>

      <div id="characters-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4">
        {characters.map((character) => (
          <div class="character-item" 
               data-name={character.name_en.toLowerCase()}
               data-rarity={character.rarity}
               data-speed={character.attributes?.speed || 0}
               data-stamina={character.attributes?.stamina || 0}>
            <CharacterCard character={character} client:load />
          </div>
        ))}
      </div>
    </div>

    <!-- Support Cards Tab -->
    <div class="tab-content" id="support-cards">
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-4 mb-4">
        <h2 class="text-xl sm:text-2xl font-display">Support Cards</h2>
        <div class="flex gap-2 w-full sm:w-auto flex-wrap sm:flex-nowrap">
          <select id="card-rarity" class="flex-1 sm:flex-none px-3 py-1.5 sm:py-1 rounded-lg border border-uma-primary/20 bg-white/50 text-sm">
            <option value="all">All</option>
            <option value="SSR">SSR</option>
            <option value="SR">SR</option>
            <option value="R">R</option>
          </select>
          <select id="card-type" class="flex-1 sm:flex-none px-3 py-1.5 sm:py-1 rounded-lg border border-uma-primary/20 bg-white/50 text-sm">
            <option value="all">Type</option>
            <option value="speed">Speed</option>
            <option value="stamina">Stamina</option>
            <option value="power">Power</option>
            <option value="guts">Guts</option>
            <option value="wisdom">Wisdom</option>
            <option value="friend">Friend</option>
          </select>
        </div>
      </div>

      <div id="cards-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4">
        {supportCards.map((card) => (
          <div class="card-item"
               data-name={card.name_en.toLowerCase()}
               data-rarity={card.rarity}
               data-type={card.type}>
            <SupportCardCard card={card} client:load />
          </div>
        ))}
      </div>
    </div>

    <!-- Tier List Tab -->
    <div class="tab-content" id="tier-list">
      <div class="flex gap-2 mb-4 overflow-x-auto pb-2 -mx-3 px-3 sm:mx-0 sm:px-0">
        <button class="tier-filter-btn active" data-category="overall">Overall</button>
        <button class="tier-filter-btn" data-category="speed">Speed</button>
        <button class="tier-filter-btn" data-category="stamina">Stamina</button>
        <button class="tier-filter-btn" data-category="power">Power</button>
        <button class="tier-filter-btn" data-category="wisdom">Wisdom</button>
        <button class="tier-filter-btn" data-category="guts">Guts</button>
      </div>
      
      <div id="tier-content">
        {['SS', 'S', 'A', 'B', 'C'].map(tier => {
          const items = tierList.filter(item => item.tier === tier);
          if (items.length === 0) return null;
          
          return (
            <div class="tier-row glass rounded-lg sm:rounded-xl p-3 sm:p-4 mb-3 sm:mb-4">
              <div class="flex items-start gap-3 sm:gap-4">
                <div class={`tier-badge tier-${tier.toLowerCase()} px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg text-white font-bold text-lg sm:text-xl min-w-[50px] sm:min-w-[60px] text-center flex-shrink-0`}>
                  {tier}
                </div>
                <div class="flex-1 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-2 sm:gap-3">
                  {items.map((item) => (
                    <a href={`/${item.item_type === 'character' ? 'characters' : 'cards'}/${item.item_id}`} 
                       class="bg-white rounded-lg p-3 shadow hover:shadow-lg transition-shadow block hover:scale-105">
                      <h4 class="font-semibold text-sm mb-1">{item.item_name}</h4>
                      <div class="flex items-center justify-between mt-2">
                        {item.item_type === 'character' ? (
                          <Users className="w-3 h-3 text-uma-primary" />
                        ) : (
                          <Sparkles className="w-3 h-3 text-uma-secondary" />
                        )}
                      </div>
                    </a>
                  ))}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>

    <!-- No Results -->
    <div id="no-results" class="hidden text-center py-12">
      <p class="text-xl text-gray-500">No results found in UmamusumeDB</p>
    </div>

    <!-- SEO Content Section -->
    <section class="mt-8 sm:mt-12 glass rounded-lg sm:rounded-2xl p-4 sm:p-6 md:p-8 mb-6 sm:mb-8">
      <h2 class="text-xl sm:text-2xl font-display mb-3 sm:mb-4">About UmamusumeDB</h2>
      <div class="prose max-w-none text-gray-700">
        <p class="mb-3 sm:mb-4 text-sm sm:text-base">
          <strong>UmamusumeDB</strong> is your comprehensive online database for Uma Musume Pretty Derby.
          Our platform provides detailed information about all characters, support cards, and game mechanics
          to help trainers build the perfect team.
        </p>
        <div class="grid sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6 mt-4 sm:mt-6">
          <div>
            <h3 class="font-bold text-lg mb-2">Why Choose UmamusumeDB?</h3>
            <ul class="text-sm space-y-1">
              <li>â€¢ Complete character database with stats</li>
              <li>â€¢ All SSR, SR, and R support cards</li>
              <li>â€¢ Community-driven tier lists</li>
              <li>â€¢ Regular updates from UmamusumeDB team</li>
            </ul>
          </div>
          <div>
            <h3 class="font-bold text-lg mb-2">UmamusumeDB Features</h3>
            <ul class="text-sm space-y-1">
              <li>â€¢ Advanced search and filtering</li>
              <li>â€¢ Team composition guides</li>
              <li>â€¢ Training optimization tips</li>
              <li>â€¢ Skill inheritance calculator</li>
            </ul>
          </div>
          <div>
            <h3 class="font-bold text-lg mb-2">Join UmamusumeDB Community</h3>
            <ul class="text-sm space-y-1">
              <li>â€¢ Share your team builds</li>
              <li>â€¢ Vote on tier lists</li>
              <li>â€¢ Contribute to UmamusumeDB wiki</li>
              <li>â€¢ Get the latest game updates</li>
            </ul>
          </div>
        </div>
        <p class="mt-6 text-sm">
          Whether you're a new trainer or a veteran player, <strong>UmamusumeDB</strong> has all the resources 
          you need to excel in Uma Musume Pretty Derby. Browse our database, check the latest tier lists, 
          and optimize your teams with UmamusumeDB's comprehensive tools and guides.
        </p>
      </div>
    </section>
  </main>

  <style>
    .filter-btn {
      @apply px-3 sm:px-4 py-1.5 sm:py-2 rounded-full text-xs sm:text-sm font-medium transition-all;
      @apply bg-white/80 hover:bg-uma-primary/10 text-gray-700 whitespace-nowrap;
    }

    .filter-btn.active {
      @apply bg-gradient-to-r from-uma-primary to-uma-secondary text-white;
    }

    .tab-btn {
      @apply px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg font-medium transition-all flex items-center whitespace-nowrap flex-shrink-0;
      @apply bg-white hover:bg-uma-primary/10 text-gray-700;
    }

    .tab-btn.active {
      @apply bg-gradient-to-r from-uma-primary to-uma-secondary text-white;
    }

    .tier-filter-btn {
      @apply px-3 py-1.5 sm:py-1 rounded-lg text-xs sm:text-sm font-medium transition-all whitespace-nowrap flex-shrink-0;
      @apply bg-white hover:bg-uma-primary/10 text-gray-700;
    }

    .tier-filter-btn.active {
      @apply bg-uma-primary text-white;
    }

    .tab-content {
      @apply hidden;
    }

    .tab-content.active {
      @apply block;
    }

    /* Scrollbar styling for horizontal scroll */
    .overflow-x-auto::-webkit-scrollbar {
      height: 4px;
    }

    .overflow-x-auto::-webkit-scrollbar-track {
      background: rgba(0, 0, 0, 0.05);
      border-radius: 4px;
    }

    .overflow-x-auto::-webkit-scrollbar-thumb {
      background: rgba(255, 107, 157, 0.3);
      border-radius: 4px;
    }

    .overflow-x-auto::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 107, 157, 0.5);
    }

  </style>

  <script define:vars={{ searchableCharacters, searchableCards }}>
    // Expose search data globally for Header component
    window.__CHARACTERS__ = searchableCharacters;
    window.__CARDS__ = searchableCards;
  </script>

  <script>
    // Global search
    const searchInput = document.getElementById('global-search') as HTMLInputElement;
    const filterBtns = document.querySelectorAll('.filter-btn');
    const tabBtns = document.querySelectorAll('.tab-btn');
    const noResults = document.getElementById('no-results');
    
    // Tab switching
    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const tabId = btn.getAttribute('data-tab');
        
        tabBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
        });
        document.getElementById(tabId)?.classList.add('active');
      });
    });
    
    // Filter buttons
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const filter = btn.getAttribute('data-filter');
        
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        applyFilters();
      });
    });
    
    // Search functionality
    function applyFilters() {
      const searchTerm = searchInput?.value.toLowerCase() || '';
      const activeFilter = document.querySelector('.filter-btn.active')?.getAttribute('data-filter') || 'all';
      let hasResults = false;
      
      // Filter characters
      document.querySelectorAll('.character-item').forEach((item) => {
        const name = item.getAttribute('data-name') || '';
        const rarity = item.getAttribute('data-rarity') || '';
        
        let show = name.includes(searchTerm);
        
        if (activeFilter === 'characters' || activeFilter === 'all') {
          // Show
        } else if (activeFilter === 'ssr') {
          show = show && rarity === '3';
        } else {
          show = false;
        }
        
        (item as HTMLElement).style.display = show ? '' : 'none';
        if (show) hasResults = true;
      });
      
      // Filter support cards
      document.querySelectorAll('.card-item').forEach((item) => {
        const name = item.getAttribute('data-name') || '';
        const rarity = item.getAttribute('data-rarity') || '';
        
        let show = name.includes(searchTerm);
        
        if (activeFilter === 'cards' || activeFilter === 'all') {
          // Show
        } else if (activeFilter === 'ssr') {
          show = show && rarity === 'SSR';
        } else if (activeFilter !== 'characters') {
          show = false;
        }
        
        (item as HTMLElement).style.display = show ? '' : 'none';
        if (show) hasResults = true;
      });
      
      // Show appropriate tab
      if (activeFilter === 'characters') {
        document.querySelector('[data-tab="characters"]')?.click();
      } else if (activeFilter === 'cards') {
        document.querySelector('[data-tab="support-cards"]')?.click();
      }
      
      // Show/hide no results
      if (noResults) {
        noResults.classList.toggle('hidden', hasResults || searchTerm === '');
      }
    }
    
    searchInput?.addEventListener('input', applyFilters);
    
    // Character sorting
    const charSort = document.getElementById('char-sort') as HTMLSelectElement;
    charSort?.addEventListener('change', () => {
      const sortBy = charSort.value;
      const container = document.getElementById('characters-grid');
      if (!container) return;
      
      const items = Array.from(container.children) as HTMLElement[];
      items.sort((a, b) => {
        if (sortBy === 'name') {
          return (a.getAttribute('data-name') || '').localeCompare(b.getAttribute('data-name') || '');
        } else if (sortBy === 'rarity') {
          return Number(b.getAttribute('data-rarity')) - Number(a.getAttribute('data-rarity'));
        } else if (sortBy === 'speed' || sortBy === 'stamina') {
          return Number(b.getAttribute(`data-${sortBy}`)) - Number(a.getAttribute(`data-${sortBy}`));
        }
        return 0;
      });
      
      items.forEach(item => container.appendChild(item));
    });
    
    // Support card filters
    const cardRarity = document.getElementById('card-rarity') as HTMLSelectElement;
    const cardType = document.getElementById('card-type') as HTMLSelectElement;
    
    function filterCards() {
      const rarity = cardRarity?.value || 'all';
      const type = cardType?.value || 'all';
      
      document.querySelectorAll('.card-item').forEach((item) => {
        const itemRarity = item.getAttribute('data-rarity') || '';
        const itemType = item.getAttribute('data-type') || '';
        
        const matchRarity = rarity === 'all' || itemRarity === rarity;
        const matchType = type === 'all' || itemType === type;
        
        (item as HTMLElement).style.display = matchRarity && matchType ? '' : 'none';
      });
    }
    
    cardRarity?.addEventListener('change', filterCards);
    cardType?.addEventListener('change', filterCards);
    
    
    // Tier list category filter
    const tierFilterBtns = document.querySelectorAll('.tier-filter-btn');
    tierFilterBtns.forEach(btn => {
      btn.addEventListener('click', async () => {
        const category = btn.getAttribute('data-category');
        
        tierFilterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Load tier list for selected category
      });
    });
  </script>
</Layout>
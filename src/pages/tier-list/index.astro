---
import Layout from '@/layouts/Layout.astro';
import Header from '@/components/Header.astro';
import { getTierListByCategory } from '@/lib/static-content';
import { Trophy, Users, Zap, Heart, Brain, Star, Sparkles, ChevronUp, ChevronDown } from 'lucide-react';

// Get tier lists for different categories
const overallCharacters = getTierListByCategory('overall').filter(item => item.item_type === 'character');
const overallCards = getTierListByCategory('overall').filter(item => item.item_type === 'support_card');
const speedCharacters = getTierListByCategory('speed').filter(item => item.item_type === 'character');
const speedCards = getTierListByCategory('speed').filter(item => item.item_type === 'support_card');

// Group by tier
function groupByTier(items: any[]) {
  return items.reduce((acc, item) => {
    if (!acc[item.tier]) acc[item.tier] = [];
    acc[item.tier].push(item);
    return acc;
  }, {} as Record<string, typeof items>);
}

const overallCharacterTiers = groupByTier(overallCharacters);
const overallCardTiers = groupByTier(overallCards);
---

<Layout title="Tier Lists">
  <Header />
  
  <main class="container mx-auto px-4 py-8">
    <!-- Page Header -->
    <div class="mb-8">
      <h1 class="text-4xl font-display gradient-text mb-4">Tier Lists</h1>
      <p class="text-gray-600">Community-voted rankings for characters and support cards</p>
    </div>

    <!-- Category Tabs -->
    <div class="flex flex-wrap gap-2 mb-8">
      <button class="tab-btn active" data-tab="overall-characters">
        <Trophy className="w-4 h-4 mr-2" />
        Overall Characters
      </button>
      <button class="tab-btn" data-tab="overall-cards">
        <Trophy className="w-4 h-4 mr-2" />
        Overall Cards
      </button>
      <button class="tab-btn" data-tab="speed">
        <Zap className="w-4 h-4 mr-2" />
        Speed
      </button>
      <button class="tab-btn" data-tab="stamina">
        <Heart className="w-4 h-4 mr-2" />
        Stamina
      </button>
      <button class="tab-btn" data-tab="power">
        <Sparkles className="w-4 h-4 mr-2" />
        Power
      </button>
      <button class="tab-btn" data-tab="wisdom">
        <Brain className="w-4 h-4 mr-2" />
        Wisdom
      </button>
      <button class="tab-btn" data-tab="guts">
        <Star className="w-4 h-4 mr-2" />
        Guts
      </button>
    </div>

    <!-- Tier List Content -->
    <div id="tier-content">
      <!-- Overall Characters Tab -->
      <div class="tab-content active" id="overall-characters">
        <h2 class="text-2xl font-display mb-6">Overall Character Tier List</h2>
        {['SS', 'S', 'A', 'B', 'C'].map(tier => {
          const items = overallCharacterTiers[tier] || [];
          if (items.length === 0) return null;
          
          return (
            <div class="tier-row glass rounded-xl p-4 mb-4">
              <div class="flex items-start gap-4">
                <div class={`tier-badge tier-${tier.toLowerCase()} px-4 py-2 rounded-lg text-white font-bold text-xl min-w-[60px] text-center`}>
                  {tier}
                </div>
                <div class="flex-1 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
                  {items.map((item: any) => (
                    <div class="tier-item bg-white rounded-lg p-3 shadow hover:shadow-lg transition-shadow">
                      <div class="flex items-center justify-between mb-2">
                        <h3 class="font-semibold text-sm">{item.item_name}</h3>
                        <div class="flex gap-1">
                          {Array.from({ length: item.item_rarity || 3 }, () => (
                            <span class="text-uma-accent text-xs">â˜…</span>
                          ))}
                        </div>
                      </div>
                      <p class="text-xs text-gray-500 font-jp mb-2">{item.item_name_jp}</p>
                      <div class="flex items-center justify-between">
                        <span class="text-xs text-gray-600">{item.votes} votes</span>
                        <div class="flex gap-1">
                          <button class="vote-btn p-1 hover:bg-green-100 rounded" data-id={item.item_id} data-category="overall" data-direction="up">
                            <ChevronUp className="w-3 h-3 text-green-600" />
                          </button>
                          <button class="vote-btn p-1 hover:bg-red-100 rounded" data-id={item.item_id} data-category="overall" data-direction="down">
                            <ChevronDown className="w-3 h-3 text-red-600" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <!-- Overall Support Cards Tab -->
      <div class="tab-content" id="overall-cards">
        <h2 class="text-2xl font-display mb-6">Overall Support Card Tier List</h2>
        {['SS', 'S', 'A', 'B', 'C'].map(tier => {
          const items = overallCardTiers[tier] || [];
          if (items.length === 0) return null;
          
          return (
            <div class="tier-row glass rounded-xl p-4 mb-4">
              <div class="flex items-start gap-4">
                <div class={`tier-badge tier-${tier.toLowerCase()} px-4 py-2 rounded-lg text-white font-bold text-xl min-w-[60px] text-center`}>
                  {tier}
                </div>
                <div class="flex-1 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
                  {items.map((item: any) => (
                    <div class="tier-item bg-white rounded-lg p-3 shadow hover:shadow-lg transition-shadow">
                      <div class="flex items-center justify-between mb-2">
                        <h3 class="font-semibold text-sm">{item.item_name}</h3>
                        <span class={`text-xs px-2 py-1 rounded font-bold text-white ${
                          item.item_rarity === 'SSR' ? 'rarity-ssr' : 
                          item.item_rarity === 'SR' ? 'rarity-sr' : 'rarity-r'
                        }`}>
                          {item.item_rarity}
                        </span>
                      </div>
                      <p class="text-xs text-gray-500 font-jp mb-2">{item.item_name_jp}</p>
                      <div class="flex items-center justify-between">
                        <span class="text-xs text-gray-600">{item.votes} votes</span>
                        <div class="flex gap-1">
                          <button class="vote-btn p-1 hover:bg-green-100 rounded" data-id={item.item_id} data-category="overall" data-direction="up">
                            <ChevronUp className="w-3 h-3 text-green-600" />
                          </button>
                          <button class="vote-btn p-1 hover:bg-red-100 rounded" data-id={item.item_id} data-category="overall" data-direction="down">
                            <ChevronDown className="w-3 h-3 text-red-600" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <!-- Other category tabs (simplified for brevity) -->
      <div class="tab-content" id="speed">
        <h2 class="text-2xl font-display mb-6">Speed Tier List</h2>
        <p class="text-gray-600">Speed-focused characters and support cards rankings</p>
        <!-- Content would be dynamically loaded -->
      </div>

      <div class="tab-content" id="stamina">
        <h2 class="text-2xl font-display mb-6">Stamina Tier List</h2>
        <p class="text-gray-600">Stamina-focused characters and support cards rankings</p>
      </div>

      <div class="tab-content" id="power">
        <h2 class="text-2xl font-display mb-6">Power Tier List</h2>
        <p class="text-gray-600">Power-focused characters and support cards rankings</p>
      </div>

      <div class="tab-content" id="wisdom">
        <h2 class="text-2xl font-display mb-6">Wisdom Tier List</h2>
        <p class="text-gray-600">Wisdom-focused support cards rankings</p>
      </div>

      <div class="tab-content" id="guts">
        <h2 class="text-2xl font-display mb-6">Guts Tier List</h2>
        <p class="text-gray-600">Guts-focused support cards rankings</p>
      </div>
    </div>

    <!-- Info Box -->
    <div class="glass rounded-xl p-6 mt-8">
      <h3 class="font-display text-xl mb-3">How Tier Lists Work</h3>
      <div class="grid md:grid-cols-2 gap-4 text-sm text-gray-600">
        <div>
          <h4 class="font-semibold text-gray-800 mb-2">Tier Explanations:</h4>
          <ul class="space-y-1">
            <li><span class="font-bold text-yellow-500">SS</span> - Meta defining, must-have</li>
            <li><span class="font-bold text-purple-500">S</span> - Excellent, highly recommended</li>
            <li><span class="font-bold text-blue-500">A</span> - Good, solid choices</li>
            <li><span class="font-bold text-green-500">B</span> - Average, situational use</li>
            <li><span class="font-bold text-gray-500">C</span> - Below average, niche use</li>
          </ul>
        </div>
        <div>
          <h4 class="font-semibold text-gray-800 mb-2">Voting System:</h4>
          <p>Community members can vote on each item's placement. Rankings are updated based on vote counts and community consensus.</p>
          <p class="mt-2">Use the up/down arrows to cast your vote!</p>
        </div>
      </div>
    </div>
  </main>

  <style>
    .tab-btn {
      @apply px-4 py-2 rounded-lg font-medium transition-all flex items-center;
      @apply bg-white hover:bg-uma-primary/10 text-gray-700;
    }
    
    .tab-btn.active {
      @apply bg-gradient-to-r from-uma-primary to-uma-secondary text-white;
    }
    
    .tab-content {
      @apply hidden;
    }
    
    .tab-content.active {
      @apply block;
    }
  </style>

  <script>
    // Tab switching
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const tabId = btn.getAttribute('data-tab');
        
        // Update button states
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Update content visibility
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
        });
        document.getElementById(tabId)?.classList.add('active');
      });
    });

    // Voting functionality (placeholder)
    document.querySelectorAll('.vote-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        e.preventDefault();
        const itemId = btn.getAttribute('data-id');
        const category = btn.getAttribute('data-category');
        const direction = btn.getAttribute('data-direction');
        
        // In production, this would call the API
        console.log(`Vote: ${itemId} in ${category} - ${direction}`);
        
        // Visual feedback
        btn.classList.add('animate-bounce');
        setTimeout(() => btn.classList.remove('animate-bounce'), 500);
      });
    });
  </script>
</Layout>
---
export interface Props {
  type?: 'website' | 'character' | 'supportCard' | 'tool';
  data?: any;
}

const { type = 'website', data } = Astro.props;
const siteUrl = 'https://umamusumedb.com';

// Website structured data
const websiteSchema = {
  '@context': 'https://schema.org',
  '@type': 'WebSite',
  name: 'UmamusumeDB',
  alternateName: 'Uma Musume Pretty Derby Database',
  url: siteUrl,
  description: 'Comprehensive database for Uma Musume Pretty Derby with character stats, support cards, tier lists, and training tools',
  potentialAction: {
    '@type': 'SearchAction',
    target: {
      '@type': 'EntryPoint',
      urlTemplate: `${siteUrl}/characters?search={search_term_string}`
    },
    'query-input': 'required name=search_term_string'
  },
  inLanguage: ['en', 'ja', 'zh'],
  publisher: {
    '@type': 'Organization',
    name: 'UmamusumeDB',
    logo: {
      '@type': 'ImageObject',
      url: `${siteUrl}/favicon.ico`
    }
  }
};

// Character page structured data
const characterSchema = data ? {
  '@context': 'https://schema.org',
  '@type': 'VideoGameCharacter',
  name: data.name_en,
  alternateName: data.name_ja,
  description: `${data.name_en} is a character in Uma Musume Pretty Derby with ${data.distance_aptitude.short} short, ${data.distance_aptitude.mile} mile, ${data.distance_aptitude.medium} medium, and ${data.distance_aptitude.long} long distance aptitudes.`,
  image: data.image_url,
  url: `${siteUrl}/characters/${data.id}`,
  game: {
    '@type': 'VideoGame',
    name: 'Uma Musume Pretty Derby'
  },
  characterAttribute: [
    {
      '@type': 'PropertyValue',
      name: 'Tier',
      value: data.tier || 'B'
    },
    {
      '@type': 'PropertyValue',
      name: 'Speed',
      value: data.base_stats?.speed || 0
    },
    {
      '@type': 'PropertyValue',
      name: 'Stamina',
      value: data.base_stats?.stamina || 0
    },
    {
      '@type': 'PropertyValue',
      name: 'Power',
      value: data.base_stats?.power || 0
    },
    {
      '@type': 'PropertyValue',
      name: 'Guts',
      value: data.base_stats?.guts || 0
    },
    {
      '@type': 'PropertyValue',
      name: 'Wisdom',
      value: data.base_stats?.wisdom || 0
    }
  ]
} : null;

// Support card structured data
const supportCardSchema = data ? {
  '@context': 'https://schema.org',
  '@type': 'Product',
  name: data.name_en,
  description: `${data.name_en} is a ${data.rarity} support card in Uma Musume Pretty Derby with ${data.type} type effects.`,
  image: data.image_url,
  url: `${siteUrl}/cards/${data.id}`,
  category: 'Game Card',
  brand: {
    '@type': 'Brand',
    name: 'Uma Musume Pretty Derby'
  },
  offers: {
    '@type': 'AggregateOffer',
    priceCurrency: 'JPY',
    availability: 'https://schema.org/InStock'
  }
} : null;

// Tool page structured data
const toolSchema = data ? {
  '@context': 'https://schema.org',
  '@type': 'WebApplication',
  name: data.name,
  description: data.description,
  url: `${siteUrl}${data.url}`,
  applicationCategory: 'GameApplication',
  operatingSystem: 'Any',
  offers: {
    '@type': 'Offer',
    price: '0',
    priceCurrency: 'USD'
  },
  aggregateRating: {
    '@type': 'AggregateRating',
    ratingValue: '4.8',
    ratingCount: '1250'
  }
} : null;

// BreadcrumbList for navigation
const breadcrumbSchema = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: [
    {
      '@type': 'ListItem',
      position: 1,
      name: 'Home',
      item: siteUrl
    },
    ...(type === 'character' && data ? [
      {
        '@type': 'ListItem',
        position: 2,
        name: 'Characters',
        item: `${siteUrl}/characters`
      },
      {
        '@type': 'ListItem',
        position: 3,
        name: data.name_en,
        item: `${siteUrl}/characters/${data.id}`
      }
    ] : []),
    ...(type === 'supportCard' && data ? [
      {
        '@type': 'ListItem',
        position: 2,
        name: 'Support Cards',
        item: `${siteUrl}/cards`
      },
      {
        '@type': 'ListItem',
        position: 3,
        name: data.name_en,
        item: `${siteUrl}/cards/${data.id}`
      }
    ] : []),
    ...(type === 'tool' && data ? [
      {
        '@type': 'ListItem',
        position: 2,
        name: 'Tools',
        item: `${siteUrl}/tools`
      },
      {
        '@type': 'ListItem',
        position: 3,
        name: data.name,
        item: `${siteUrl}${data.url}`
      }
    ] : [])
  ].filter(Boolean)
};

// Combine schemas based on type
let schemas = [websiteSchema];

if (type === 'character' && characterSchema) {
  schemas.push(characterSchema);
}
if (type === 'supportCard' && supportCardSchema) {
  schemas.push(supportCardSchema);
}
if (type === 'tool' && toolSchema) {
  schemas.push(toolSchema);
}

// Add breadcrumb for all non-homepage
if (breadcrumbSchema.itemListElement.length > 1) {
  schemas.push(breadcrumbSchema);
}
---

{schemas.map(schema => (
  <script type="application/ld+json" set:html={JSON.stringify(schema, null, 2)} />
))}